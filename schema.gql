# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Customer {
  id: ID!
  createdAt: Date
  updatedAt: Date
  host: String!
  domain: String!
  name: String!
  organizationId: Float
}

"""Date custom scalar type"""
scalar Date

type UserEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  nickName: String
  login: String
  email: String
  password: String!
  profile: String
  codeToken: Float
  userCreatedId: Float
  userCreated: UserEntity
  userUpdatedId: Float
  userUpdated: UserEntity
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type StateEntity {
  id: ID!
  createdAt: Date
  updatedAt: Date
  description: String!
  uf: String!
}

type CityEntity {
  id: ID!
  createdAt: Date
  updatedAt: Date
  description: String
  stateId: Float
  state: StateEntity
}

type ResponsibleEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userCreated: UserEntity!
  userUpdatedId: Float
  userUpdated: UserEntity!
  name: String
  dateBirth: DateTime
  gender: String
  codeNationality: String
  nationality: String
  adress: String
  district: String
  complement: String
  stateId: Float
  state: StateEntity
  cityId: Float
  city: CityEntity
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  civilStatus: Boolean
  note: String
  profession: String
  workCompany: String
  workPhone: String
  profile: String
}

type StudentEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userCreated: UserEntity!
  userUpdatedId: Float
  userUpdated: UserEntity!
  name: String
  useNickName: Boolean
  nickName: String
  dateBirth: DateTime
  gender: String
  codeNationality: String
  stateNaturalnessId: Float
  stateNaturalness: StateEntity
  cityNaturalnessId: Float
  cityNaturalness: CityEntity
  stateNaturalnessForeign: String
  naturalnessForeign: String
  nationalityForeign: String
  reside: String
  resideResponsableId: Float
  resideResponsable: ResponsibleEntity
  fatherId: Float
  father: ResponsibleEntity
  motherId: Float
  mother: ResponsibleEntity
  adress: String
  district: String
  complement: String
  stateId: Float
  state: StateEntity
  cityId: Float
  city: CityEntity
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  note: String
  profile: String
}

type PermissionEntity {
  id: ID!
  createdAt: Date
  updatedAt: Date
  code: String!
  description: String!
}

type UserPermissionEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userCreated: UserEntity!
  userUpdatedId: Float
  userUpdated: UserEntity!
  userId: Float
  user: UserEntity
  codeId: Float!
  code: PermissionEntity
  create: Boolean
  edit: Boolean
  delete: Boolean
  list: Boolean
  visible: Boolean
}

type CompanyEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userCreated: UserEntity!
  userUpdatedId: Float
  userUpdated: UserEntity!
  socialReason: String
  nameFantasy: String
  adress: String
  district: String
  complement: String
  stateId: Float
  state: StateEntity
  cityId: Float
  city: CityEntity
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cnpj: String
  recognition: String
  publication: String
  numberInep: String
  principal: String
  secretary: String
  note: String
  image: String
}

type YearEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userCreated: UserEntity!
  userUpdatedId: Float
  userUpdated: UserEntity!
  year: String
  dateBegin: DateTime
  dateEnd: DateTime
  dateModule1: DateTime
  dateModule2: DateTime
  dateModule3: DateTime
  dateModule4: DateTime
}

type SubjectEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userCreated: UserEntity!
  userUpdatedId: Float
  userUpdated: UserEntity!
  description: String
  abbreviation: String
  descriptionMinutes: String
  status: Boolean
}

type TeacherEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userCreated: UserEntity!
  userUpdatedId: Float
  userUpdated: UserEntity!
  name: String
  nickName: String
  adress: String
  district: String
  complement: String
  stateId: Float
  state: StateEntity
  cityId: Float
  city: CityEntity
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  status: Boolean
  note: String
  profile: String
}

type ClassRoomEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userCreated: UserEntity!
  userUpdatedId: Float
  userUpdated: UserEntity!
  description: String
  abbreviation: String
  descriptionMinutes: String
  shift: String
  type: String
  level: String
  classification: String
  status: Boolean
  companyId: Float
  company: CompanyEntity
  yearId: Float
  year: YearEntity
}

type ClassRoomItemEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userCreated: UserEntity!
  userUpdatedId: Float
  userUpdated: UserEntity!
  classroomId: Float
  classroom: ClassRoomEntity
  subjectId: Float
  subject: SubjectEntity
  teacherId: Float
  teacher: TeacherEntity
  workHours: Float
  visibleReport: Boolean
  visibleMinute: Boolean
  registerCall: Boolean
  registerContent: Boolean
  registerOccurrence: Boolean
  type: String
  numberGrades: Float
  gradeMin: Float
  gradeMax: Float
}

type ClassRoomInjectEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userCreated: UserEntity!
  userUpdatedId: Float
  userUpdated: UserEntity!
  classroomItemId: Float
  classroomItem: ClassRoomItemEntity
  subject1Id: Float
  subject1: SubjectEntity
  subject2Id: Float
  subject2: SubjectEntity
  subject3Id: Float
  subject3: SubjectEntity
  subject4Id: Float
  subject4: SubjectEntity
  average: Float
}

type StudentInformationEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userCreated: UserEntity!
  userUpdatedId: Float
  userUpdated: UserEntity!
  studentId: Float
  student: StudentEntity
  yearId: Float
  year: YearEntity
  dateRegistration: DateTime
  classroomId: Float
  classroom: ClassRoomEntity
  situation: String
  numberStudent: Float
  payday: Float
  formPayment: Float
  monthlyDiscount: Float
  dateExit: Date
  reasonExit: String
  descriptionReason: String
  responsible1Id: Float
  responsible1: ResponsibleEntity
  relationship1: Float
  responsible2Id: Float
  responsible2: ResponsibleEntity
  relationship2: Float
  responsiblePedagId: Float
  responsiblePedag: ResponsibleEntity
  relationshipPedag: Float
}

type EmployeeEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userCreated: UserEntity!
  userUpdatedId: Float
  userUpdated: UserEntity!
  name: String
  nickName: String
  adress: String
  district: String
  complement: String
  stateId: Float
  state: StateEntity
  cityId: Float
  city: CityEntity
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  status: Boolean
  setor: Float
  function: Float
  note: String
  profile: String
}

type OrganizationEntity {
  id: ID!
  createdAt: Date
  updatedAt: Date
  description: String
  dateBegin: DateTime
  dateEnd: DateTime
}

type Query {
  customer(id: Float!): Customer!
  customerAll: [Customer!]!
  user(id: Float!): UserEntity!
  userAll: [UserEntity!]!
  userLogin(password: String!, email: String!): String!
  student(id: Float!): StudentEntity!
  studentAll: [StudentEntity!]!
  state(id: Float!): StateEntity!
  stateAll: [StateEntity!]!
  city(id: Float!): CityEntity!
  cityAll: [CityEntity!]!
  responsible(id: Float!): ResponsibleEntity!
  responsibleAll: [ResponsibleEntity!]!
  userPermission(id: Float!): UserPermissionEntity!
  userPermissionAll: [UserPermissionEntity!]!
  permission(id: Float!): PermissionEntity!
  permissionAll: [PermissionEntity!]!
  company(id: Float!): CompanyEntity!
  companyAll: [CompanyEntity!]!
  year(id: Float!): YearEntity!
  yearAll: [YearEntity!]!
  subject(id: Float!): SubjectEntity!
  subjectAll: [SubjectEntity!]!
  teacher(id: Float!): TeacherEntity!
  teacherAll: [TeacherEntity!]!
  classRoom(id: Float!): ClassRoomEntity!
  classRoomAll: [ClassRoomEntity!]!
  classRoomItem(id: Float!): ClassRoomItemEntity!
  classRoomItemAll: [ClassRoomItemEntity!]!
  classRoomInject(id: Float!): ClassRoomInjectEntity!
  classRoomInjectAll: [ClassRoomInjectEntity!]!
  studentInformation(id: Float!): StudentInformationEntity!
  studentInformationAll: [StudentInformationEntity!]!
  employee(id: Float!): EmployeeEntity!
  employeeAll: [EmployeeEntity!]!
  organization(id: Float!): OrganizationEntity!
  organizationAll: [OrganizationEntity!]!
}

type Mutation {
  customerCreate(input: CreateCustomerInput!): Customer!
  customerUpdate(input: CreateCustomerInput!, id: Float!): Customer!
  customerDelete(id: Float!): Boolean!
  userCreate(input: CreateUsersInput!): UserEntity!
  userDelete(id: Float!): Boolean!
  userUpdate(input: CreateUsersInput!, id: Float!): UserEntity!
  studentCreate(input: CreateStudentInput!): StudentEntity!
  studentUpdate(input: CreateStudentInput!, id: Float!): StudentEntity!
  studentDelete(id: Float!): Boolean!
  stateCreate(input: CreateStateInput!): StateEntity!
  stateUpdate(input: CreateStateInput!, id: Float!): StateEntity!
  stateDelete(id: Float!): Boolean!
  cityCreate(input: CreateCityInput!): CityEntity!
  cityUpdate(input: CreateCityInput!, id: Float!): CityEntity!
  cityDelete(id: Float!): Boolean!
  responsibleCreate(input: CreateResponsibleInput!): ResponsibleEntity!
  responsibleUpdate(input: CreateResponsibleInput!, id: Float!): ResponsibleEntity!
  responsibleDelete(id: Float!): Boolean!
  userPermissionCreate(input: CreateUserPermissionInput!): UserPermissionEntity!
  userPermissionDelete(id: Float!): Boolean!
  userPermissionUpdate(input: CreateUserPermissionInput!, id: Float!): UserPermissionEntity!
  permissionCreate(input: CreatePermissionInput!): PermissionEntity!
  permissionUpdate(input: CreatePermissionInput!, id: Float!): PermissionEntity!
  permissionDelete(id: Float!): Boolean!
  companyCreate(input: CreateCompanyInput!): CompanyEntity!
  companyUpdate(input: CreateCompanyInput!, id: Float!): CompanyEntity!
  companyDelete(id: Float!): Boolean!
  yearCreate(input: CreateYearInput!): YearEntity!
  yearDelete(id: Float!): Boolean!
  yearUpdate(input: CreateYearInput!, id: Float!): YearEntity!
  subjectCreate(input: CreateSubjectInput!): SubjectEntity!
  subjectDelete(id: Float!): Boolean!
  subjectUpdate(input: CreateSubjectInput!, id: Float!): SubjectEntity!
  teacherCreate(input: CreateTeacherInput!): TeacherEntity!
  teacherUpdate(input: CreateTeacherInput!, id: Float!): TeacherEntity!
  teacherDelete(id: Float!): Boolean!
  classRoomCreate(input: CreateClassRoomInput!): ClassRoomEntity!
  classRoomDelete(id: Float!): Boolean!
  classRoomUpdate(input: CreateClassRoomInput!, id: Float!): ClassRoomEntity!
  classRoomItemCreate(input: CreateClassRoomItemInput!): ClassRoomItemEntity!
  classRoomItemDelete(id: Float!): Boolean!
  classRoomItemUpdate(input: CreateClassRoomItemInput!, id: Float!): ClassRoomItemEntity!
  classRoomInjectCreate(input: CreateClassRoomInjectInput!): ClassRoomInjectEntity!
  classRoomInjectDelete(id: Float!): Boolean!
  classRoomInjectUpdate(input: CreateClassRoomInjectInput!, id: Float!): ClassRoomInjectEntity!
  studentInformationCreate(input: CreatStudentInformationInput!): StudentInformationEntity!
  studentInformationDelete(id: Float!): Boolean!
  studentInformationUpdate(input: CreatStudentInformationInput!, id: Float!): StudentInformationEntity!
  employeeCreate(input: CreateEmploeeInput!): EmployeeEntity!
  employeeUpdate(input: CreateEmploeeInput!, id: Float!): EmployeeEntity!
  employeeDelete(id: Float!): Boolean!
  organizationCreate(input: CreateOrganizationInput!): OrganizationEntity!
  organizationUpdate(input: CreateOrganizationInput!, id: Float!): OrganizationEntity!
  organizationDelete(id: Float!): Boolean!
}

input CreateCustomerInput {
  host: String!
  domain: String!
  name: String!
  organizationId: Float
}

input CreateUsersInput {
  name: String
  nickName: String
  login: String
  profile: String
  codeToken: Float
  email: String
  password: String
}

input CreateStudentInput {
  name: String
  useNickName: Boolean
  nickName: String
  dateBirth: DateTime
  gender: String
  codeNationality: String
  stateNaturalnessId: Float
  cityNaturalnessId: Float
  stateNaturalnessForeign: String
  naturalnessForeign: String
  nationalityForeign: String
  reside: String
  resideResponsableId: Float
  fatherId: Float
  motherId: Float
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  note: String
  profile: String
}

input CreateStateInput {
  description: String!
  uf: String!
}

input CreateCityInput {
  description: String
  stateId: Float
}

input CreateResponsibleInput {
  name: String
  dateBirth: DateTime
  gender: String
  codeNationality: String
  nationality: String
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  civilStatus: Boolean
  note: String
  profession: String
  workCompany: String
  workPhone: String
  profile: String
}

input CreateUserPermissionInput {
  userId: Float!
  codeId: Float!
  create: Boolean
  edit: Boolean
  delete: Boolean
  list: Boolean
  visible: Boolean
}

input CreatePermissionInput {
  code: String!
  description: String!
}

input CreateCompanyInput {
  socialReason: String
  nameFantasy: String
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cnpj: String
  recognition: String
  publication: String
  numberInep: String
  principal: String
  secretary: String
  note: String
  image: String
}

input CreateYearInput {
  year: String
  dateBegin: DateTime
  dateEnd: DateTime
  dateModule1: DateTime
  dateModule2: DateTime
  dateModule3: DateTime
  dateModule4: DateTime
}

input CreateSubjectInput {
  description: String
  abbreviation: String
  descriptionMinutes: String
  status: Boolean
}

input CreateTeacherInput {
  name: String
  nickName: String
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  status: Boolean
  note: String
  profile: String
}

input CreateClassRoomInput {
  description: String
  abbreviation: String
  descriptionMinutes: String
  shift: String
  type: String
  level: String
  classification: String
  status: Boolean
  companyId: Float
  yearId: Float
}

input CreateClassRoomItemInput {
  classroomId: Float
  subjectId: Float
  teacherId: Float
  workHours: Float
  visibleReport: Boolean
  visibleMinute: Boolean
  registerCall: Boolean
  registerContent: Boolean
  registerOccurrence: Boolean
  type: String
  numberGrades: Float
  gradeMin: Float
  gradeMax: Float
}

input CreateClassRoomInjectInput {
  classroomItemId: Float
  subject1Id: Float
  subject2Id: Float
  subject3Id: Float
  subject4Id: Float
  average: Float
}

input CreatStudentInformationInput {
  studentId: Float
  yearId: Float
  dateRegistration: DateTime
  classroomId: Float
  situation: String
  numberStudent: Float
  payday: Float
  formPayment: Float
  monthlyDiscount: Float
  dateExit: Date
  reasonExit: String
  descriptionReason: String
  responsible1Id: Float
  relationship1: Float
  responsible2Id: Float
  relationship2: Float
  responsiblePedagId: Float
  relationshipPedag: Float
}

input CreateEmploeeInput {
  name: String
  nickName: String
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  status: Boolean
  setor: Float
  function: Float
  note: String
  profile: String
}

input CreateOrganizationInput {
  description: String
  dateBegin: DateTime
  dateEnd: DateTime
}
