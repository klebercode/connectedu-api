# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Customer {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  host: String!
  domain: String!
  name: String!
  organizationId: Float
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PageInfo {
  startCursor: String
  endCursor: String
  countBefore: Float
  countNext: Float
  countCurrent: Float
  countTotal: Float
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type UserEntity {
  id: ID!
  name: String!
  nickName: String
  login: String!
  email: String
  password: String!
  profile: String
  codeToken: Float
  userCreatedId: Float
  userCreated: UserEntity
  userUpdatedId: Float
  userUpdated: UserEntity
  createdAt: DateTime
  updatedAt: DateTime
}

type UserPaginated {
  edges: [UserEntityEdge!]
  pageInfo: PageInfo
}

type UserEntityEdge {
  cursor: String!
  node: UserEntity!
}

type StateEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  description: String!
  uf: String!
}

type StatePaginated {
  edges: [StateEntityEdge!]
  pageInfo: PageInfo
}

type StateEntityEdge {
  cursor: String!
  node: StateEntity!
}

type CityEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  description: String
  stateId: Float
  state: StateEntity
}

type CityPaginated {
  edges: [CityEntityEdge!]
  pageInfo: PageInfo
}

type CityEntityEdge {
  cursor: String!
  node: CityEntity!
}

type ResponsibleEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  name: String
  dateBirth: DateTime
  gender: String
  codeNationality: String
  nationality: String
  adress: String
  district: String
  complement: String
  stateId: Float
  state: StateEntity
  cityId: Float
  city: CityEntity
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  civilStatus: Boolean
  note: String
  profession: String
  workCompany: String
  workPhone: String
  profile: String
  token: String
}

enum TypeOwer {
  S
  R
  T
  E
  I
}

type ResponsiblePaginated {
  edges: [ResponsibleEntityEdge!]
  pageInfo: PageInfo
}

type ResponsibleEntityEdge {
  cursor: String!
  node: ResponsibleEntity!
}

type StudentEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  name: String
  useNickName: Boolean
  nickName: String
  dateBirth: DateTime
  gender: String
  codeNationality: String
  stateNaturalnessId: Float
  stateNaturalness: StateEntity
  cityNaturalnessId: Float
  cityNaturalness: CityEntity
  stateNaturalnessForeign: String
  naturalnessForeign: String
  nationalityForeign: String
  reside: String
  resideResponsableId: Float
  resideResponsable: ResponsibleEntity
  fatherId: Float
  father: ResponsibleEntity
  motherId: Float
  mother: ResponsibleEntity
  adress: String
  district: String
  complement: String
  stateId: Float
  state: StateEntity
  cityId: Float
  city: CityEntity
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  note: String
  profile: String
  token: String
}

type StudentPaginated {
  edges: [StudentEntityEdge!]
  pageInfo: PageInfo
}

type StudentEntityEdge {
  cursor: String!
  node: StudentEntity!
}

type PermissionEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  code: String!
  description: String!
}

type PermissionPaginated {
  edges: [PermissionEntityEdge!]
  pageInfo: PageInfo
}

type PermissionEntityEdge {
  cursor: String!
  node: PermissionEntity!
}

type UserPermissionEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  userId: Float
  user: UserEntity
  codeId: Float!
  code: PermissionEntity
  create: Boolean
  edit: Boolean
  delete: Boolean
  list: Boolean
  visible: Boolean
}

type UserPermissionPaginated {
  edges: [UserPermissionEntityEdge!]
  pageInfo: PageInfo
}

type UserPermissionEntityEdge {
  cursor: String!
  node: UserPermissionEntity!
}

type CompanyEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  socialReason: String
  nameFantasy: String
  adress: String
  district: String
  complement: String
  stateId: Float
  state: StateEntity
  cityId: Float
  city: CityEntity
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cnpj: String
  recognition: String
  publication: String
  numberInep: String
  principal: String
  secretary: String
  note: String
  image: String
}

type CompanyPaginated {
  edges: [CompanyEntityEdge!]
  pageInfo: PageInfo
}

type CompanyEntityEdge {
  cursor: String!
  node: CompanyEntity!
}

type YearEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  year: String
  dateBegin: DateTime
  dateEnd: DateTime
  dateModule1: DateTime
  dateModule2: DateTime
  dateModule3: DateTime
  dateModule4: DateTime
}

type YearPaginated {
  edges: [YearEntityEdge!]
  pageInfo: PageInfo
}

type YearEntityEdge {
  cursor: String!
  node: YearEntity!
}

type SubjectEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  description: String
  abbreviation: String
  descriptionMinutes: String
  status: Boolean
}

type SubjectPaginated {
  edges: [SubjectEntityEdge!]
  pageInfo: PageInfo
}

type SubjectEntityEdge {
  cursor: String!
  node: SubjectEntity!
}

type TeacherEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  name: String
  nickName: String
  adress: String
  district: String
  complement: String
  stateId: Float
  state: StateEntity
  cityId: Float
  city: CityEntity
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  status: Boolean
  note: String
  profile: String
  token: String
}

type TeacherPaginated {
  edges: [TeacherEntityEdge!]
  pageInfo: PageInfo
}

type TeacherEntityEdge {
  cursor: String!
  node: TeacherEntity!
}

type ClassRoomEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  description: String
  abbreviation: String
  descriptionMinutes: String
  shift: String
  type: String
  level: String
  classification: String
  status: Boolean
  companyId: Float
  company: CompanyEntity
  yearId: Float
  year: YearEntity
}

type ClassRoomPaginated {
  edges: [ClassRoomEntityEdge!]
  pageInfo: PageInfo
}

type ClassRoomEntityEdge {
  cursor: String!
  node: ClassRoomEntity!
}

type ClassRoomItemEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  classroomId: Float
  classroom: ClassRoomEntity
  subjectId: Float
  subject: SubjectEntity
  teacherId: Float
  teacher: TeacherEntity
  workHours: Float
  visibleReport: Boolean
  visibleMinute: Boolean
  registerCall: Boolean
  registerContent: Boolean
  registerOccurrence: Boolean
  type: String
  numberGrades: Float
  gradeMin: Float
  gradeMax: Float
}

type ClassRoomItemPaginated {
  edges: [ClassRoomItemEntityEdge!]
  pageInfo: PageInfo
}

type ClassRoomItemEntityEdge {
  cursor: String!
  node: ClassRoomItemEntity!
}

type ClassRoomInjectEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  classroomItemId: Float
  classroomItem: ClassRoomItemEntity
  subject1Id: Float
  subject1: SubjectEntity
  subject2Id: Float
  subject2: SubjectEntity
  subject3Id: Float
  subject3: SubjectEntity
  subject4Id: Float
  subject4: SubjectEntity
  average: Float
}

type ClassRoomInjecPaginated {
  edges: [ClassRoomInjectEntityEdge!]
  pageInfo: PageInfo
}

type ClassRoomInjectEntityEdge {
  cursor: String!
  node: ClassRoomInjectEntity!
}

type StudentInformationEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  studentId: Float
  student: StudentEntity
  yearId: Float
  year: YearEntity
  dateRegistration: DateTime
  classroomId: Float
  classroom: ClassRoomEntity
  situation: String
  numberStudent: Float
  payday: Float
  formPayment: Float
  monthlyDiscount: Float
  dateExit: Date
  reasonExit: String
  descriptionReason: String
  responsible1Id: Float
  responsible1: ResponsibleEntity
  relationship1: Float
  responsible2Id: Float
  responsible2: ResponsibleEntity
  relationship2: Float
  responsiblePedagId: Float
  responsiblePedag: ResponsibleEntity
  relationshipPedag: Float
}

"""Date custom scalar type"""
scalar Date

type StudentInformationPaginated {
  edges: [StudentInformationEntityEdge!]
  pageInfo: PageInfo
}

type StudentInformationEntityEdge {
  cursor: String!
  node: StudentInformationEntity!
}

type EmployeeEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  name: String
  nickName: String
  adress: String
  district: String
  complement: String
  stateId: Float
  state: StateEntity
  cityId: Float
  city: CityEntity
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  status: Boolean
  setor: Float
  function: Float
  note: String
  profile: String
  token: String
}

type EmployeePaginated {
  edges: [EmployeeEntityEdge!]
  pageInfo: PageInfo
}

type EmployeeEntityEdge {
  cursor: String!
  node: EmployeeEntity!
}

type OccurrenceEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  description: String
  status: Boolean
  type: Float
  points: Float
}

type OccurrencePaginated {
  edges: [OccurrenceEntityEdge!]
  pageInfo: PageInfo
}

type OccurrenceEntityEdge {
  cursor: String!
  node: OccurrenceEntity!
}

type StudentOccurrenceEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  occurrenceId: Float
  occurrence: OccurrenceEntity
  studentId: Float
  student: StudentEntity
  date: DateTime
  typeOrigin: Float
  teacherId: Float
  teacher: TeacherEntity
  subjectId: Float
  subject: SubjectEntity
  employeeId: Float
  employee: EmployeeEntity
  note: String
}

type StudentOccurrencePaginated {
  edges: [StudentOccurrenceEntityEdge!]
  pageInfo: PageInfo
}

type StudentOccurrenceEntityEdge {
  cursor: String!
  node: StudentOccurrenceEntity!
}

type StudentGradeEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  studentId: Float!
  student: StudentEntity!
  yearId: Float!
  year: YearEntity!
  subjectId: Float!
  subject: SubjectEntity!
  unit: String!
  typeUnit: String!
  typeGrade: Float!
  grade: Float
  concept: String
}

type StudentGradePaginated {
  edges: [StudentGradeEntityEdge!]
  pageInfo: PageInfo
}

type StudentGradeEntityEdge {
  cursor: String!
  node: StudentGradeEntity!
}

type StudentCallEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  studentId: Float!
  student: StudentEntity!
  subjectId: Float!
  subject: SubjectEntity!
  date: DateTime
  time: DateTime
  state: String
  justify: Boolean
  reason: String
}

type StudentCallPaginated {
  edges: [StudentCallEntityEdge!]
  pageInfo: PageInfo
}

type StudentCallEntityEdge {
  cursor: String!
  node: StudentCallEntity!
}

type ContentPlannedEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  yearId: Float!
  year: YearEntity!
  subjectId: Float!
  subject: SubjectEntity!
  classroomId: Float!
  classroom: ClassRoomEntity!
  teacherId: Float!
  teacher: TeacherEntity!
  classDouble: Boolean
  date: DateTime
  content: String
  process: String
  ability: String
  classWork: String
  classHome: String
}

type ContentPlannedPaginated {
  edges: [ContentPlannedEntityEdge!]
  pageInfo: PageInfo
}

type ContentPlannedEntityEdge {
  cursor: String!
  node: ContentPlannedEntity!
}

type ContentAppliedEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userCreatedId: Float
  userTypeCreated: TypeOwer
  userCreated: UserEntity!
  userUpdatedId: Float
  userTypeUpdated: TypeOwer
  userUpdated: UserEntity!
  yearId: Float!
  year: YearEntity!
  subjectId: Float!
  subject: SubjectEntity!
  classroomId: Float!
  classroom: ClassRoomEntity!
  teacherId: Float!
  teacher: TeacherEntity!
  classDouble: Boolean
  date: DateTime
  content: String
  process: String
  ability: String
  classWork: String
  classHome: String
  justify: String
}

type ContentAppliedPaginated {
  edges: [ContentAppliedEntityEdge!]
  pageInfo: PageInfo
}

type ContentAppliedEntityEdge {
  cursor: String!
  node: ContentAppliedEntity!
}

type OrganizationEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  description: String
  dateBegin: DateTime
  dateEnd: DateTime
}

type OrganizationPaginated {
  edges: [OrganizationEntityEdge!]
  pageInfo: PageInfo
}

type OrganizationEntityEdge {
  cursor: String!
  node: OrganizationEntity!
}

type AcessTokenEntity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  customer: Customer
  customerId: Float!
  organization: OrganizationEntity
  organizationId: Float!
  statusAtivationApp: Boolean
  statusAtivationWeb: Boolean
  typeUser: TypeOwer
  token: String
}

type AcessTokensPaginated {
  edges: [AcessTokenEntityEdge!]
  pageInfo: PageInfo
}

type AcessTokenEntityEdge {
  cursor: String!
  node: AcessTokenEntity!
}

type AcessFirstObject {
  ownerId: Float!
  customer: String!
  TypeUser: TypeOwer!
}

type Query {
  customer(id: Float!): Customer!
  customerMany(ids: [Float!]!): [Customer!]!
  customerAll: [Customer!]!
  user(id: Float!): UserEntity!
  userAll: [UserEntity!]!
  userPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): UserPaginated!
  userMany(ids: [Float!]!): [UserEntity!]!
  userLogin(password: String!, email: String!): String!
  student(id: Float!): StudentEntity!
  studentAll: [StudentEntity!]!
  studentPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): StudentPaginated!
  studentMany(ids: [Float!]!): [StudentEntity!]!
  state(id: Float!): StateEntity!
  statePages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): StatePaginated!
  stateMany(ids: [Float!]!): [StateEntity!]!
  stateAll: [StateEntity!]!
  city(id: Float!): CityEntity!
  cityAll: [CityEntity!]!
  cityPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): CityPaginated!
  cityMany(ids: [Float!]!): [CityEntity!]!
  responsible(id: Float!): ResponsibleEntity!
  responsiblePages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): ResponsiblePaginated!
  responsibleAll: [ResponsibleEntity!]!
  responsibleMany(ids: [Float!]!): [ResponsibleEntity!]!
  userPermission(id: Float!): UserPermissionEntity!
  userPermissionAll: [UserPermissionEntity!]!
  userPermissionPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): UserPermissionPaginated!
  userPermissionMany(ids: [Float!]!): [UserPermissionEntity!]!
  permission(id: Float!): PermissionEntity!
  permissionAll: [PermissionEntity!]!
  permissionPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): PermissionPaginated!
  permissionMany(ids: [Float!]!): [PermissionEntity!]!
  company(id: Float!): CompanyEntity!
  companyAll: [CompanyEntity!]!
  companyPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): CompanyPaginated!
  companyMany(ids: [Float!]!): [CompanyEntity!]!
  year(id: Float!): YearEntity!
  yearAll: [YearEntity!]!
  yearPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): YearPaginated!
  yearMany(ids: [Float!]!): [YearEntity!]!
  subject(id: Float!): SubjectEntity!
  subjectAll: [SubjectEntity!]!
  subjectPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): SubjectPaginated!
  subjectMany(ids: [Float!]!): [SubjectEntity!]!
  teacher(id: Float!): TeacherEntity!
  teacherAll: [TeacherEntity!]!
  teacherPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): TeacherPaginated!
  teacherMany(ids: [Float!]!): [TeacherEntity!]!
  classRoom(id: Float!): ClassRoomEntity!
  classRoomAll: [ClassRoomEntity!]!
  classRoomPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): ClassRoomPaginated!
  classRoomMany(ids: [Float!]!): [ClassRoomEntity!]!
  classRoomItem(id: Float!): ClassRoomItemEntity!
  classRoomItemAll: [ClassRoomItemEntity!]!
  classRoomItemPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): ClassRoomItemPaginated!
  classRoomItemMany(ids: [Float!]!): [ClassRoomItemEntity!]!
  classRoomInject(id: Float!): ClassRoomInjectEntity!
  classRoomInjectAll: [ClassRoomInjectEntity!]!
  classRoomInjectPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): ClassRoomInjecPaginated!
  classRoomInjectMany(ids: [Float!]!): [ClassRoomInjectEntity!]!
  studentInformation(id: Float!): StudentInformationEntity!
  studentInformationAll: [StudentInformationEntity!]!
  studentInformationPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): StudentInformationPaginated!
  studentInformationMany(ids: [Float!]!): [StudentInformationEntity!]!
  employee(id: Float!): EmployeeEntity!
  employeeAll: [EmployeeEntity!]!
  employeePages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): EmployeePaginated!
  employeetMany(ids: [Float!]!): [EmployeeEntity!]!
  occurrence(id: Float!): OccurrenceEntity!
  occurrenceAll: [OccurrenceEntity!]!
  occurrencePages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): OccurrencePaginated!
  occurrenceMany(ids: [Float!]!): [OccurrenceEntity!]!
  studentOccurrence(id: Float!): StudentOccurrenceEntity!
  studentOccurrenceAll: [StudentOccurrenceEntity!]!
  studentOccurrencePages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): StudentOccurrencePaginated!
  studentOccurrenceMany(ids: [Float!]!): [StudentOccurrenceEntity!]!
  studentGrade(id: Float!): StudentGradeEntity!
  studentGradePages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): StudentGradePaginated!
  studentGradeMany(ids: [Float!]!): [StudentGradeEntity!]!
  studentGradeAll: [StudentGradeEntity!]!
  studentCall(id: Float!): StudentCallEntity!
  studentCallAll: [StudentCallEntity!]!
  studentCallPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): StudentCallPaginated!
  studentCallMany(ids: [Float!]!): [StudentCallEntity!]!
  contentPlanned(id: Float!): ContentPlannedEntity!
  contentPlannedAll: [ContentPlannedEntity!]!
  contentPlannedPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): ContentPlannedPaginated!
  contentPlannedMany(ids: [Float!]!): [ContentPlannedEntity!]!
  contentApplied(id: Float!): ContentAppliedEntity!
  contentAppliedAll: [ContentAppliedEntity!]!
  contentAppliedPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): ContentAppliedPaginated!
  contentAppliedMany(ids: [Float!]!): [ContentAppliedEntity!]!
  acessToken(id: Float!): AcessTokenEntity!
  acessTokenAll: [AcessTokenEntity!]!
  acessTokenPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): AcessTokensPaginated!
  acessTokenMany(ids: [Float!]!): [AcessTokenEntity!]!
  acessTokenFirst(token: String!): AcessFirstObject!
  organization(id: Float!): OrganizationEntity!
  organizationAll: [OrganizationEntity!]!
  organizationPages(first: Int, after: String, last: Int, before: String, filter: String, orderby: String, orderby_desc: Boolean): OrganizationPaginated!
  organizationMany(ids: [Float!]!): [OrganizationEntity!]!
}

type Mutation {
  customerCreate(input: CreateCustomerInput!): Customer!
  customerCreateMany(input: [CreateCustomerInput!]!): [Customer!]!
  customerDelete(id: Float!): Boolean!
  customerDeleteMany(ids: [Float!]!): Boolean!
  customerUpdate(input: CreateCustomerInput!, id: Float!): Customer!
  userCreate(input: CreateUsersInput!): UserEntity!
  userCreateMany(input: [CreateUsersInput!]!): [UserEntity!]!
  userDelete(id: Float!): Boolean!
  userDeleteMany(ids: [Float!]!): Boolean!
  userUpdate(input: UpdateUsersInput!, id: Float!): UserEntity!
  userUpdateMany(input: [UpdateUsersInput!]!): Boolean!
  userUpdatePassword(input: String!, id: Float!): Boolean!
  studentCreate(input: CreateStudentInput!): StudentEntity!
  studentCreateMany(input: [CreateStudentInput!]!): [StudentEntity!]!
  studentDelete(id: Float!): Boolean!
  studentDeleteMany(ids: [Float!]!): Boolean!
  studentUpdate(input: UpdateStudentInput!, id: Float!): StudentEntity!
  studentUpdateMany(input: [UpdateStudentInput!]!): Boolean!
  stateCreate(input: CreateStateInput!): StateEntity!
  stateCreateMany(input: [CreateStateInput!]!): [StateEntity!]!
  stateDelete(id: Float!): Boolean!
  stateDeleteMany(ids: [Float!]!): Boolean!
  stateUpdate(input: UpdateStateInput!, id: Float!): StateEntity!
  stateUpdateMany(input: [UpdateStateInput!]!): Boolean!
  cityCreate(input: CreateCityInput!): CityEntity!
  cityCreateMany(input: [CreateCityInput!]!): [CityEntity!]!
  cityDelete(id: Float!): Boolean!
  cityDeleteMany(ids: [Float!]!): Boolean!
  cityUpdate(input: UpdateCityInput!, id: Float!): CityEntity!
  cityUpdateMany(input: [UpdateCityInput!]!): Boolean!
  responsibleCreate(input: CreateResponsibleInput!): ResponsibleEntity!
  subjectCreateMany(input: [CreateSubjectInput!]!): [SubjectEntity!]!
  responsibleDelete(id: Float!): Boolean!
  responsibleDeleteMany(ids: [Float!]!): Boolean!
  responsibleUpdate(input: UpdateResponsibleInput!, id: Float!): ResponsibleEntity!
  responsibleUpdateMany(input: [UpdateResponsibleInput!]!): Boolean!
  userPermissionCreate(input: CreateUserPermissionInput!): UserPermissionEntity!
  userPermissionCreateMany(input: [CreateUserPermissionInput!]!): [UserPermissionEntity!]!
  userPermissionDelete(id: Float!): Boolean!
  userPermissionDeleteMany(ids: [Float!]!): Boolean!
  userPermissionUpdate(input: UpdateUserPermissionInput!, id: Float!): UserPermissionEntity!
  userPermissionUpdateMany(input: [UpdateUserPermissionInput!]!): Boolean!
  permissionCreate(input: CreatePermissionInput!): PermissionEntity!
  permissionCreateMany(input: [CreatePermissionInput!]!): [PermissionEntity!]!
  permissionDelete(id: Float!): Boolean!
  permissionDeleteMany(ids: [Float!]!): Boolean!
  permissionUpdate(input: UpdatePermissionInput!, id: Float!): PermissionEntity!
  permissionUpdateMany(input: [UpdatePermissionInput!]!): Boolean!
  companyCreate(input: CreateCompanyInput!): CompanyEntity!
  companyCreateMany(input: [CreateCompanyInput!]!): [CompanyEntity!]!
  companyDelete(id: Float!): Boolean!
  companyDeleteMany(ids: [Float!]!): Boolean!
  companyUpdate(input: UpdateCompanyInput!, id: Float!): CompanyEntity!
  companyUpdateMany(input: [UpdateCompanyInput!]!): Boolean!
  yearCreate(input: CreateYearInput!): YearEntity!
  yearCreateMany(input: [CreateYearInput!]!): [YearEntity!]!
  yearDelete(id: Float!): Boolean!
  yearDeleteMany(ids: [Float!]!): Boolean!
  yearUpdate(input: UpdateYearInput!, id: Float!): YearEntity!
  yearUpdateMany(input: [UpdateYearInput!]!): Boolean!
  subjectCreate(input: CreateSubjectInput!): SubjectEntity!
  subjectDelete(id: Float!): Boolean!
  subjectDeleteMany(ids: [Float!]!): Boolean!
  subjectUpdate(input: UpdateSubjectInput!, id: Float!): SubjectEntity!
  subjectUpdateMany(input: [UpdateSubjectInput!]!): Boolean!
  teacherCreate(input: CreateTeacherInput!): TeacherEntity!
  teacherCreateMany(input: [CreateTeacherInput!]!): [TeacherEntity!]!
  teacherDelete(id: Float!): Boolean!
  teacherDeleteMany(ids: [Float!]!): Boolean!
  teacherUpdate(input: UpdateTeacherInput!, id: Float!): TeacherEntity!
  teacherUpdateMany(input: [UpdateTeacherInput!]!): Boolean!
  classRoomCreate(input: CreateClassRoomInput!): ClassRoomEntity!
  classRoomCreateMany(input: [CreateClassRoomInput!]!): [ClassRoomEntity!]!
  classRoomDelete(id: Float!): Boolean!
  classRoomDeleteMany(ids: [Float!]!): Boolean!
  classRoomUpdate(input: UpdateClassRoomInput!, id: Float!): ClassRoomEntity!
  classRoomUpdateMany(input: [UpdateClassRoomInput!]!): Boolean!
  classRoomItemCreate(input: CreateClassRoomItemInput!): ClassRoomItemEntity!
  classRoomItemMany(input: [CreateClassRoomItemInput!]!): [ClassRoomItemEntity!]!
  classRoomItemDelete(id: Float!): Boolean!
  classRoomItemDeleteMany(ids: [Float!]!): Boolean!
  classRoomItemUpdate(input: UpdateClassRoomItemInput!, id: Float!): ClassRoomItemEntity!
  classRoomItemUpdateMany(input: [UpdateClassRoomItemInput!]!): Boolean!
  classRoomInjectCreate(input: CreateClassRoomInjectInput!): ClassRoomInjectEntity!
  classRoomInjectCreateMany(input: [CreateClassRoomInjectInput!]!): [ClassRoomInjectEntity!]!
  classRoomInjectDelete(id: Float!): Boolean!
  classRoomInjectDeleteMany(ids: [Float!]!): Boolean!
  classRoomInjectUpdate(input: UpdateClassRoomInjectInput!, id: Float!): ClassRoomInjectEntity!
  classRoomInjectUpdateMany(input: [UpdateClassRoomInjectInput!]!): Boolean!
  studentInformationCreate(input: CreatStudentInformationInput!): StudentInformationEntity!
  sstudentInformationCreateMany(input: [CreatStudentInformationInput!]!): [StudentInformationEntity!]!
  studentInformationDelete(id: Float!): Boolean!
  studentInformationDeleteMany(ids: [Float!]!): Boolean!
  studentInformationUpdate(input: UpdateStudentInformationInput!, id: Float!): StudentInformationEntity!
  studentInformationUpdateMany(input: [UpdateStudentInformationInput!]!): Boolean!
  employeeCreate(input: CreateEmploeeInput!): EmployeeEntity!
  employeeCreateMany(input: [CreateEmploeeInput!]!): [EmployeeEntity!]!
  employeeDelete(id: Float!): Boolean!
  employeeDeleteMany(ids: [Float!]!): Boolean!
  employeeUpdate(input: UpdateEmploeeInput!, id: Float!): EmployeeEntity!
  employeeUpdateMany(input: [UpdateEmploeeInput!]!): Boolean!
  occurrenceCreate(input: CreateOccurrenceInput!): OccurrenceEntity!
  occurrenceCreateMany(input: [CreateOccurrenceInput!]!): [OccurrenceEntity!]!
  occurrenceDelete(id: Float!): Boolean!
  occurrenceDeleteMany(ids: [Float!]!): Boolean!
  occurrenceUpdate(input: UpdateOccurrenceInput!, id: Float!): OccurrenceEntity!
  occurrenceUpdateMany(input: [UpdateOccurrenceInput!]!): Boolean!
  studentOccurrenceCreate(input: CreatStudentOccurrenceInput!): StudentOccurrenceEntity!
  studentOccurrenceCreateMany(input: [CreatStudentOccurrenceInput!]!): [StudentOccurrenceEntity!]!
  studentOccurrenceDelete(id: Float!): Boolean!
  studentOccurrenceDeleteMany(ids: [Float!]!): Boolean!
  studentOccurrenceUpdate(input: UpdateStudentOccurrenceInput!, id: Float!): StudentOccurrenceEntity!
  studentOccurrenceUpdateMany(input: [UpdateStudentOccurrenceInput!]!): Boolean!
  studentGradeCreate(input: CreatStudentGradeInput!): StudentGradeEntity!
  studentGradeCreateMany(input: [CreatStudentGradeInput!]!): [StudentGradeEntity!]!
  studentGradeDelete(id: Float!): Boolean!
  studentGradeDeleteMany(ids: [Float!]!): Boolean!
  studentGradeUpdate(input: UpdateStudentGradeInput!, id: Float!): StudentGradeEntity!
  studentGradeUpdateMany(input: [UpdateStudentGradeInput!]!): Boolean!
  studentCallCreate(input: CreatStudentCallInput!): StudentCallEntity!
  studentCallCreateMany(input: [CreatStudentCallInput!]!): [StudentCallEntity!]!
  studentCallDelete(id: Float!): Boolean!
  studentCallDeleteMany(ids: [Float!]!): Boolean!
  studentCallUpdate(input: UpdateStudentCallInput!, id: Float!): StudentCallEntity!
  studentCallUpdateMany(input: [UpdateStudentCallInput!]!): Boolean!
  contentPlannedCreate(input: CreatContentPlannedInput!): ContentPlannedEntity!
  contentPlannedCreateMany(input: [CreatContentPlannedInput!]!): [ContentPlannedEntity!]!
  contentPlannedDelete(id: Float!): Boolean!
  contentPlannedDeleteMany(ids: [Float!]!): Boolean!
  contentPlannedUpdate(input: UpdateContentPlannedInput!, id: Float!): ContentPlannedEntity!
  contentPlannedUpdateMany(input: [UpdateContentPlannedInput!]!): Boolean!
  contentAppliedCreate(input: CreatContentAppliedInput!): ContentAppliedEntity!
  contentAppliedCreateMany(input: [CreatContentAppliedInput!]!): [ContentAppliedEntity!]!
  contentAppliedDelete(id: Float!): Boolean!
  contentAppliedDeleteMany(ids: [Float!]!): Boolean!
  contentAppliedUpdate(input: UpdateContentAppliedInput!, id: Float!): ContentAppliedEntity!
  contentAppliedUpdateMany(input: [UpdateContentAppliedInput!]!): Boolean!
  acessTokenCreate(input: CreateAcessTokenInput!): AcessTokenEntity!
  acessTokenCreateMany(input: [CreateAcessTokenInput!]!): [AcessTokenEntity!]!
  acessTokenDelete(id: Float!): Boolean!
  acessTokenDeleteMany(ids: [Float!]!): Boolean!
  acessTokenUpdate(input: UpdateAcessTokenInput!, id: Float!): AcessTokenEntity!
  acessTokenUpdateMany(input: [UpdateAcessTokenInput!]!): Boolean!
  organizationCreate(input: CreateOrganizationInput!): OrganizationEntity!
  organizationCreateMany(input: [CreateOrganizationInput!]!): [OrganizationEntity!]!
  organizationDelete(id: Float!): Boolean!
  organizationDeleteMany(ids: [Float!]!): Boolean!
  organizationUpdate(input: UpdateOrganizationInput!, id: Float!): OrganizationEntity!
  organizationUpdateMany(input: [UpdateOrganizationInput!]!): Boolean!
}

input CreateCustomerInput {
  host: String!
  domain: String!
  name: String!
  organizationId: Float
}

input CreateUsersInput {
  name: String
  nickName: String
  login: String
  profile: String
  codeToken: Float
  email: String
  password: String
}

input UpdateUsersInput {
  name: String
  nickName: String
  login: String
  profile: String
  email: String
}

input CreateStudentInput {
  name: String
  useNickName: Boolean
  nickName: String
  dateBirth: DateTime
  gender: String
  codeNationality: String
  stateNaturalnessId: Float
  cityNaturalnessId: Float
  stateNaturalnessForeign: String
  naturalnessForeign: String
  nationalityForeign: String
  reside: String
  resideResponsableId: Float
  fatherId: Float
  motherId: Float
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  note: String
  profile: String
}

input UpdateStudentInput {
  id: Float
  name: String
  useNickName: Boolean
  nickName: String
  dateBirth: DateTime
  gender: String
  codeNationality: String
  stateNaturalnessId: Float
  cityNaturalnessId: Float
  stateNaturalnessForeign: String
  naturalnessForeign: String
  nationalityForeign: String
  reside: String
  resideResponsableId: Float
  fatherId: Float
  motherId: Float
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  note: String
  profile: String
}

input CreateStateInput {
  description: String!
  uf: String!
}

input UpdateStateInput {
  id: Float
  description: String!
  uf: String!
}

input CreateCityInput {
  description: String
  stateId: Float
}

input UpdateCityInput {
  id: Float
  description: String
  stateId: Float
}

input CreateResponsibleInput {
  name: String
  dateBirth: DateTime
  gender: String
  codeNationality: String
  nationality: String
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  civilStatus: Boolean
  note: String
  profession: String
  workCompany: String
  workPhone: String
  profile: String
}

input CreateSubjectInput {
  description: String
  abbreviation: String
  descriptionMinutes: String
  status: Boolean
}

input UpdateResponsibleInput {
  id: Float
  name: String
  dateBirth: DateTime
  gender: String
  codeNationality: String
  nationality: String
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  civilStatus: Boolean
  note: String
  profession: String
  workCompany: String
  workPhone: String
  profile: String
}

input CreateUserPermissionInput {
  userId: Float!
  codeId: Float!
  create: Boolean
  edit: Boolean
  delete: Boolean
  list: Boolean
  visible: Boolean
}

input UpdateUserPermissionInput {
  id: Float
  userId: Float!
  codeId: Float!
  create: Boolean
  edit: Boolean
  delete: Boolean
  list: Boolean
  visible: Boolean
}

input CreatePermissionInput {
  code: String!
  description: String!
}

input UpdatePermissionInput {
  id: Float
  code: String!
  description: String!
}

input CreateCompanyInput {
  socialReason: String
  nameFantasy: String
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cnpj: String
  recognition: String
  publication: String
  numberInep: String
  principal: String
  secretary: String
  note: String
  image: String
}

input UpdateCompanyInput {
  id: Float
  socialReason: String
  nameFantasy: String
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cnpj: String
  recognition: String
  publication: String
  numberInep: String
  principal: String
  secretary: String
  note: String
  image: String
}

input CreateYearInput {
  year: String
  dateBegin: DateTime
  dateEnd: DateTime
  dateModule1: DateTime
  dateModule2: DateTime
  dateModule3: DateTime
  dateModule4: DateTime
}

input UpdateYearInput {
  id: Float
  year: String
  dateBegin: DateTime
  dateEnd: DateTime
  dateModule1: DateTime
  dateModule2: DateTime
  dateModule3: DateTime
  dateModule4: DateTime
}

input UpdateSubjectInput {
  id: Float
  description: String
  abbreviation: String
  descriptionMinutes: String
  status: Boolean
}

input CreateTeacherInput {
  name: String
  nickName: String
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  status: Boolean
  note: String
  profile: String
}

input UpdateTeacherInput {
  id: Float
  name: String
  nickName: String
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  status: Boolean
  note: String
  profile: String
}

input CreateClassRoomInput {
  description: String
  abbreviation: String
  descriptionMinutes: String
  shift: String
  type: String
  level: String
  classification: String
  status: Boolean
  companyId: Float
  yearId: Float
}

input UpdateClassRoomInput {
  id: Float
  description: String
  abbreviation: String
  descriptionMinutes: String
  shift: String
  type: String
  level: String
  classification: String
  status: Boolean
  companyId: Float
  yearId: Float
}

input CreateClassRoomItemInput {
  classroomId: Float
  subjectId: Float
  teacherId: Float
  workHours: Float
  visibleReport: Boolean
  visibleMinute: Boolean
  registerCall: Boolean
  registerContent: Boolean
  registerOccurrence: Boolean
  type: String
  numberGrades: Float
  gradeMin: Float
  gradeMax: Float
}

input UpdateClassRoomItemInput {
  id: Float
  classroomId: Float
  subjectId: Float
  teacherId: Float
  workHours: Float
  visibleReport: Boolean
  visibleMinute: Boolean
  registerCall: Boolean
  registerContent: Boolean
  registerOccurrence: Boolean
  type: String
  numberGrades: Float
  gradeMin: Float
  gradeMax: Float
}

input CreateClassRoomInjectInput {
  classroomItemId: Float!
  subject1Id: Float
  subject2Id: Float
  subject3Id: Float
  subject4Id: Float
  average: Float
}

input UpdateClassRoomInjectInput {
  id: Float
  classroomItemId: Float
  subject1Id: Float
  subject2Id: Float
  subject3Id: Float
  subject4Id: Float
  average: Float
}

input CreatStudentInformationInput {
  studentId: Float
  yearId: Float
  dateRegistration: DateTime
  classroomId: Float
  situation: String
  numberStudent: Float
  payday: Float
  formPayment: Float
  monthlyDiscount: Float
  dateExit: Date
  reasonExit: String
  descriptionReason: String
  responsible1Id: Float
  relationship1: Float
  responsible2Id: Float
  relationship2: Float
  responsiblePedagId: Float
  relationshipPedag: Float
}

input UpdateStudentInformationInput {
  id: Float
  studentId: Float
  yearId: Float
  dateRegistration: DateTime
  classroomId: Float
  situation: String
  numberStudent: Float
  payday: Float
  formPayment: Float
  monthlyDiscount: Float
  dateExit: Date
  reasonExit: String
  descriptionReason: String
  responsible1Id: Float
  relationship1: Float
  responsible2Id: Float
  relationship2: Float
  responsiblePedagId: Float
  relationshipPedag: Float
}

input CreateEmploeeInput {
  name: String
  nickName: String
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  status: Boolean
  setor: Float
  function: Float
  note: String
  profile: String
}

input UpdateEmploeeInput {
  id: Float
  name: String
  nickName: String
  adress: String
  district: String
  complement: String
  stateId: Float
  cityId: Float
  zipCode: String
  email: String
  phone: String
  cellphone: String
  whatsapp: String
  cpf: String
  identity: String
  OrgIdentity: String
  status: Boolean
  setor: Float
  function: Float
  note: String
  profile: String
}

input CreateOccurrenceInput {
  description: String
  status: Boolean
  type: Float
  points: Float
}

input UpdateOccurrenceInput {
  id: Float
  description: String
  status: Boolean
  type: Float
  points: Float
}

input CreatStudentOccurrenceInput {
  occurrenceId: Float
  studentId: Float
  date: DateTime
  typeOrigin: Float
  teacherId: Float
  subjectId: Float
  employeeId: Float
  note: String
}

input UpdateStudentOccurrenceInput {
  id: Float
  occurrenceId: Float
  studentId: Float
  date: DateTime
  typeOrigin: Float
  teacherId: Float
  subjectId: Float
  employeeId: Float
  note: String
}

input CreatStudentGradeInput {
  studentId: Float!
  yearId: Float!
  subjectId: Float!
  unit: String!
  typeUnit: String!
  typeGrade: Float!
  grade: Float
  concept: String
}

input UpdateStudentGradeInput {
  id: Float
  studentId: Float!
  yearId: Float!
  subjectId: Float!
  unit: String!
  typeUnit: String!
  typeGrade: Float!
  grade: Float
  concept: String
}

input CreatStudentCallInput {
  studentId: Float!
  subjectId: Float!
  date: DateTime!
  time: DateTime
  state: String
  justify: Boolean
  reason: String
}

input UpdateStudentCallInput {
  id: Float
  studentId: Float!
  subjectId: Float!
  date: DateTime!
  time: DateTime
  state: String
  justify: Boolean
  reason: String
}

input CreatContentPlannedInput {
  yearId: Float!
  subjectId: Float!
  classroomId: Float!
  teacherId: Float!
  classDouble: Boolean
  date: DateTime
  content: String
  process: String
  ability: String
  classWork: String
  classHome: String
}

input UpdateContentPlannedInput {
  id: Float
  yearId: Float!
  subjectId: Float!
  classroomId: Float!
  teacherId: Float!
  classDouble: Boolean
  date: DateTime
  content: String
  process: String
  ability: String
  classWork: String
  classHome: String
}

input CreatContentAppliedInput {
  yearId: Float!
  subjectId: Float!
  classroomId: Float!
  teacherId: Float!
  classDouble: Boolean!
  date: DateTime!
  content: String
  process: String
  ability: String
  classWork: String
  classHome: String
  justify: String
}

input UpdateContentAppliedInput {
  id: Float
  yearId: Float!
  subjectId: Float!
  classroomId: Float!
  teacherId: Float!
  classDouble: Boolean!
  date: DateTime!
  content: String
  process: String
  ability: String
  classWork: String
  classHome: String
  justify: String
}

input CreateAcessTokenInput {
  ownerId: Float!
  typeUser: TypeOwer!
}

input UpdateAcessTokenInput {
  ownerId: Float!
  TypeUser: TypeOwer!
}

input CreateOrganizationInput {
  description: String
  dateBegin: DateTime
  dateEnd: DateTime
}

input UpdateOrganizationInput {
  id: Float
  description: String
  dateBegin: DateTime
  dateEnd: DateTime
}
